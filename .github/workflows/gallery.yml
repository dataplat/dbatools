name: Test version in Gallery
on:
 workflow_dispatch:
 push:
   # branches:  # Removed to apply to all branches
   #   - master
   paths-ignore:
     - '**/*.md'
     - '**/*.json'
     - 'docs/**'
     - '.github/FUNDING.yml'
     - '.github/ISSUE_TEMPLATE/**'
     - '.github/PULL_REQUEST_TEMPLATE.md'
     - '.aider/**'
     - '.devcontainer/**'
     - '.vscode/**'
     - 'bin/**'
     - 'en-us/**'
defaults:
  run:
    shell: pwsh
jobs:
  linux-tests:
    env:
        SMODefaultModuleName: dbatools
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Read dbatools.library version
        id: get-version
        shell: pwsh
        run: |
          $versionConfig = Get-Content '.github/dbatools-library-version.json' | ConvertFrom-Json
          $version = $versionConfig.version
          $isPreview = $version -like "*preview*"
          Write-Output "version=$version" >> $env:GITHUB_OUTPUT
          Write-Output "is_preview=$isPreview" >> $env:GITHUB_OUTPUT
          Write-Output "Using dbatools.library version: $version"
          Write-Output "Is preview version: $isPreview"

      - name: Install and cache PowerShell modules (stable versions)
        if: steps.get-version.outputs.is_preview == 'False'
        uses: potatoqualitee/psmodulecache@v6.2.1
        with:
          modules-to-cache: dbatools.library:${{ steps.get-version.outputs.version }}

      - name: Install dbatools.library (preview versions)
        if: steps.get-version.outputs.is_preview == 'True'
        shell: pwsh
        run: |
          Write-Output "Preview version detected, bypassing PSModuleCache and using install script"
          ./.github/scripts/install-dbatools-library.ps1

      - name: Download dbatools from Gallery
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module dbatools -AllowPrerelease

      - name: Set encryption values
        run: |
          Import-Module dbatools
          Set-DbatoolsInsecureConnection
          Get-DbatoolsConfigValue -FullName sql.connection.encrypt | Write-Warning

      - name:  Setup docker images
        run: |
          # create a shared network
          docker network create localnet
          # Expose engine and endpoint then setup a shared path for migrations
          docker run -p 1433:1433  --volume shared:/shared:z --name mssql1 --hostname mssql1 --network localnet -d dbatools/sqlinstance
          # Expose second engine and endpoint on different port
          docker run -p 14333:1433 --volume shared:/shared:z --name mssql2 --hostname mssql2 --network localnet -d dbatools/sqlinstance2

      - name: ðŸ‘¥ Clone appveyor repo
        working-directory: /tmp
        run: |
          gh repo clone dataplat/appveyor-lab

      - name: Run tests
        env:
          TENANTID: ${{secrets.TENANTID}}
          CLIENTID: ${{secrets.CLIENTID}}
          CLIENTSECRET: ${{secrets.CLIENTSECRET}}
          CLIENT_GUID: ${{secrets.CLIENT_GUID}}
          CLIENT_GUID_SECRET: ${{secrets.CLIENT_GUID_SECRET}}
        run: |
          Import-Module dbatools -Force
          $null = Invoke-Pester .github/scripts/gh-actions.ps1 -Output Detailed -PassThru