name: VMSS Test Only

on:
  push:
    branches: ['**']
  workflow_dispatch:
    inputs:
      vmss_capacity:
        description: 'Number of VMSS instances to provision'
        required: false
        default: '3'

env:
  AZURE_RESOURCE_GROUP: dbatools-ci-runners
  VMSS_SUBSCRIPTION_ID: ${{ secrets.VMSS_AZURE_SUBSCRIPTION_ID }}
  VMSS_CUSTOM_IMAGE_ID: ${{ secrets.VMSS_AZURE_CUSTOM_IMAGE_ID }}

jobs:
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      build-id: ${{ steps.generate-id.outputs.build-id }}
      vmss-name: ${{ steps.generate-vmss-name.outputs.vmss-name }}
      vmss-capacity: ${{ steps.determine-capacity.outputs.capacity }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Generate build ID
      id: generate-id
      run: |
        BUILD_ID="${{ github.run_id }}-$(date +%s)"
        echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT

    - name: Generate VMSS name
      id: generate-vmss-name
      run: |
        sed -i 's/\r$//' .github/scripts/generate-vmss-name.sh
        chmod +x .github/scripts/generate-vmss-name.sh
        .github/scripts/generate-vmss-name.sh \
          "${{ github.actor }}" \
          "${{ github.event_name }}" \
          "${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}"

    - name: Determine capacity
      id: determine-capacity
      run: |
        CAPACITY="${{ github.event.inputs.vmss_capacity || '3' }}"
        echo "capacity=$CAPACITY" >> $GITHUB_OUTPUT
        echo "VMSS capacity: $CAPACITY"

  provision-vmss:
    needs: prepare-build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.VMSS_AZURE_CREDENTIALS }}

    - name: Verify resource group exists
      run: |
        if ! az group show --name "${{ env.AZURE_RESOURCE_GROUP }}" &>/dev/null; then
          echo "ERROR: Resource group ${{ env.AZURE_RESOURCE_GROUP }} does not exist"
          exit 1
        fi
        echo "Resource group verified"

    - name: Set secrets in Key Vault
      run: |
        # Retry Key Vault operations as they can be flaky
        for i in {1..3}; do
          if az keyvault secret set --vault-name dbatoolsci --name "GITHUB-RUNNER-TOKEN" --value "${{ secrets.VMSS_GH_PAT }}" &&
             az keyvault secret set --vault-name dbatoolsci --name "GITHUB-REPOSITORY" --value "${{ github.repository }}" &&
             az keyvault secret set --vault-name dbatoolsci --name "GITHUB-BUILD-ID" --value "${{ needs.prepare-build.outputs.build-id }}" &&
             az keyvault secret set --vault-name dbatoolsci --name "VMSS-NAME" --value "${{ needs.prepare-build.outputs.vmss-name }}"; then
            echo "Key Vault secrets set successfully"
            break
          fi

          if [ $i -eq 3 ]; then
            echo "Failed to set Key Vault secrets after 3 attempts"
            exit 1
          fi

          echo "Retry $i failed, waiting 10 seconds..."
          sleep 10
        done

    - name: Create or update VMSS
      run: |
        sed -i 's/\r$//' .github/scripts/create-vmss.sh
        chmod +x .github/scripts/create-vmss.sh
        .github/scripts/create-vmss.sh \
          "${{ needs.prepare-build.outputs.vmss-name }}" \
          "${{ needs.prepare-build.outputs.vmss-capacity }}" \
          "${{ env.AZURE_RESOURCE_GROUP }}" \
          "${{ env.VMSS_CUSTOM_IMAGE_ID }}" \
          "${{ github.actor }}" \
          "${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}" \
          "${{ github.repository }}" \
          "${{ needs.prepare-build.outputs.build-id }}"

    - name: Wait for VMSS instances to be ready
      run: |
        VMSS_NAME="${{ needs.prepare-build.outputs.vmss-name }}"
        echo "Waiting for VMSS instances to be in running state..."

        for i in {1..30}; do
          RUNNING_COUNT=$(az vmss list-instances \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name "$VMSS_NAME" \
            --query "[?instanceView.statuses[?code=='PowerState/running']] | length(@)" \
            --output tsv)

          echo "Running instances: $RUNNING_COUNT/${{ needs.prepare-build.outputs.vmss-capacity }}"

          if [ "$RUNNING_COUNT" -eq "${{ needs.prepare-build.outputs.vmss-capacity }}" ]; then
            echo "All instances are running"
            break
          fi

          if [ $i -eq 30 ]; then
            echo "Timeout waiting for instances to start"
            # Don't fail here - proceed with available instances
            echo "Proceeding with $RUNNING_COUNT available instances"
          fi

          sleep 15
        done

  wait-for-runners:
    needs: [prepare-build, provision-vmss]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Wait for dedicated runners
      run: |
        VMSS_NAME="${{ needs.prepare-build.outputs.vmss-name }}"
        BUILD_ID="${{ needs.prepare-build.outputs.build-id }}"
        EXPECTED_RUNNERS="${{ needs.prepare-build.outputs.vmss-capacity }}"

        echo "Waiting for runners from VMSS: $VMSS_NAME"
        echo "Expected runners: $EXPECTED_RUNNERS"

        BEST_COUNT=0
        for i in {1..45}; do
          RUNNER_COUNT=$(curl -s -H "Authorization: token ${{ secrets.VMSS_GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runners" | \
            jq "[.runners[] | select(.labels[].name | contains(\"$VMSS_NAME\"))] | length" 2>/dev/null || echo "0")

          if [ "$RUNNER_COUNT" -gt "$BEST_COUNT" ]; then
            BEST_COUNT=$RUNNER_COUNT
          fi

          echo "Registered runners: $RUNNER_COUNT/$EXPECTED_RUNNERS (best: $BEST_COUNT)"

          if [ "$RUNNER_COUNT" -ge "$EXPECTED_RUNNERS" ]; then
            echo "All expected runners are available!"
            break
          fi

          if [ $i -eq 45 ]; then
            if [ "$BEST_COUNT" -gt 0 ]; then
              echo "Timeout: Got $BEST_COUNT runners, proceeding with available runners"
            else
              echo "CRITICAL: No runners came online - this will likely cause test failures"
            fi
          fi

          sleep 20
        done

  test-connectivity:
    needs: [prepare-build, provision-vmss, wait-for-runners]
    runs-on: [self-hosted, "${{ needs.prepare-build.outputs.vmss-name }}"]
    timeout-minutes: 5
    strategy:
      matrix:
        test: [1, 2, 3]
      fail-fast: false  # Don't stop other tests if one fails
    steps:
    - name: Test VMSS connectivity
      run: |
        Write-Host "=== VMSS Test ===" -ForegroundColor Green
        Write-Host "Machine: $env:COMPUTERNAME" -ForegroundColor Yellow
        Write-Host "Test Job: ${{ matrix.test }}" -ForegroundColor Yellow
        Write-Host "VMSS Name: ${{ needs.prepare-build.outputs.vmss-name }}" -ForegroundColor Yellow
        Write-Host "Build ID: ${{ needs.prepare-build.outputs.build-id }}" -ForegroundColor Yellow

        Write-Host "Simulating work for 60 seconds..." -ForegroundColor Cyan
        Start-Sleep -Seconds 60

        Write-Host "Test completed on $(Get-Date)" -ForegroundColor Green

  cleanup-vmss:
    needs: [prepare-build, provision-vmss, test-connectivity]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.VMSS_AZURE_CREDENTIALS }}

    - name: Cleanup VMSS and runners
      run: |
        sed -i 's/\r$//' .github/scripts/cleanup-vmss.sh
        chmod +x .github/scripts/cleanup-vmss.sh
        .github/scripts/cleanup-vmss.sh \
          "${{ needs.prepare-build.outputs.vmss-name }}" \
          "${{ env.AZURE_RESOURCE_GROUP }}" \
          "${{ secrets.VMSS_GH_PAT }}" \
          "${{ github.repository }}" \
          "true"