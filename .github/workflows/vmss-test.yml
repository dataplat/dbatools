name: VMSS Test Only

on:
  push:
    branches: ['**']  # Runs on any branch
  workflow_dispatch:
    inputs:
      vmss_capacity:
        description: 'Number of VMSS instances to provision'
        required: false
        default: '3'

env:
  AZURE_RESOURCE_GROUP: dbatools-ci-runners
  VMSS_SUBSCRIPTION_ID: ${{ secrets.VMSS_AZURE_SUBSCRIPTION_ID }}
  VMSS_CUSTOM_IMAGE_ID: ${{ secrets.VMSS_AZURE_CUSTOM_IMAGE_ID }}

jobs:
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      build-id: ${{ steps.generate-id.outputs.build-id }}
      vmss-name: ${{ steps.generate-vmss-name.outputs.vmss-name }}
      vmss-capacity: ${{ steps.determine-capacity.outputs.capacity }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Generate build ID
      id: generate-id
      run: |
        BUILD_ID="${{ github.run_id }}-$(date +%s)"
        echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT

    - name: Generate VMSS name
      id: generate-vmss-name
      run: |
        chmod +x .github/scripts/generate-vmss-name.sh
        .github/scripts/generate-vmss-name.sh \
          "${{ github.actor }}" \
          "${{ github.event_name }}" \
          "${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}"

    - name: Determine capacity
      id: determine-capacity
      run: |
        CAPACITY="${{ github.event.inputs.vmss_capacity || '3' }}"
        echo "capacity=$CAPACITY" >> $GITHUB_OUTPUT
        echo "VMSS capacity: $CAPACITY"

  provision-vmss:
    needs: prepare-build
    runs-on: ubuntu-latest
    outputs:
      runner-token: ${{ steps.get-token.outputs.runner-token }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.VMSS_AZURE_CREDENTIALS }}

    - name: Get GitHub runner registration token
      id: get-token
      run: |
        TOKEN=$(curl -X POST \
          -H "Authorization: token ${{ secrets.VMSS_GH_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token | jq -r .token)
        echo "::add-mask::$TOKEN"
        echo "runner-token=$TOKEN" >> $GITHUB_OUTPUT

    - name: Create or update VMSS
      run: |
        chmod +x .github/scripts/create-vmss.sh
        .github/scripts/create-vmss.sh \
          "${{ needs.prepare-build.outputs.vmss-name }}" \
          "${{ needs.prepare-build.outputs.vmss-capacity }}" \
          "${{ env.AZURE_RESOURCE_GROUP }}" \
          "${{ env.VMSS_CUSTOM_IMAGE_ID }}" \
          "${{ github.actor }}" \
          "${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}"

    - name: Configure VMSS instances as GitHub runners
      run: |
        az vmss run-command invoke \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name "${{ needs.prepare-build.outputs.vmss-name }}" \
          --command-id RunPowerShellScript \
          --instance-ids "*" \
          --scripts @.github/scripts/setup-github-runner.ps1 \
          --parameters \
            GitHubToken="${{ steps.get-token.outputs.runner-token }}" \
            BuildId="${{ needs.prepare-build.outputs.build-id }}" \
            VmssName="${{ needs.prepare-build.outputs.vmss-name }}" \
            Repository="${{ github.repository }}"

  wait-for-runners:
    needs: [prepare-build, provision-vmss]
    runs-on: ubuntu-latest
    steps:
    - name: Wait for dedicated runners
      run: |
        VMSS_NAME="${{ needs.prepare-build.outputs.vmss-name }}"
        BUILD_ID="${{ needs.prepare-build.outputs.build-id }}"
        EXPECTED_RUNNERS="${{ needs.prepare-build.outputs.vmss-capacity }}"

        echo "Waiting for runners from VMSS: $VMSS_NAME"
        for i in {1..30}; do
          RUNNER_COUNT=$(curl -s -H "Authorization: token ${{ secrets.VMSS_GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runners" | \
            jq "[.runners[] | select(.labels[].name | contains(\"$VMSS_NAME\"))] | length")

          echo "Registered runners: $RUNNER_COUNT/$EXPECTED_RUNNERS"
          if [ "$RUNNER_COUNT" -ge "$((EXPECTED_RUNNERS - 1))" ]; then
            echo "Sufficient runners available"
            break
          fi
          sleep 20
        done

  # Simple test that runs on each VMSS instance
  test-connectivity:
    needs: [prepare-build, provision-vmss, wait-for-runners]
    runs-on: [self-hosted, windows, sql-server, "${{ needs.prepare-build.outputs.vmss-name }}"]
    timeout-minutes: 5
    strategy:
      matrix:
        test: [1, 2, 3] # This will create 3 jobs that can run on different instances
    steps:
    - name: Test VMSS connectivity
      run: |
        Write-Host "=== VMSS Test ==="
        Write-Host "Machine: $env:COMPUTERNAME"
        Write-Host "Test Job: ${{ matrix.test }}"
        Write-Host "VMSS Name: ${{ needs.prepare-build.outputs.vmss-name }}"
        Write-Host "Build ID: ${{ needs.prepare-build.outputs.build-id }}"

        # Simulate some work
        Write-Host "Simulating work for 60 seconds..."
        Start-Sleep -Seconds 60

        Write-Host "Test completed on $(Get-Date)"

  # Add watchdog for cost protection
  vmss-watchdog:
    needs: [prepare-build, provision-vmss]
    runs-on: ubuntu-latest
    steps:
    - name: Emergency cleanup after 10 minutes
      run: |
        echo "Watchdog: Sleeping for 10 minutes"
        sleep 600

        echo "Watchdog triggered - forcing cleanup"
        # Force cleanup code here

  cleanup-vmss:
    needs: [prepare-build, provision-vmss, test-connectivity]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.VMSS_AZURE_CREDENTIALS }}

    - name: Cleanup VMSS and runners
      run: |
        chmod +x .github/scripts/cleanup-vmss.sh
        .github/scripts/cleanup-vmss.sh \
          "${{ needs.prepare-build.outputs.vmss-name }}" \
          "${{ env.AZURE_RESOURCE_GROUP }}" \
          "${{ secrets.VMSS_GH_PAT }}" \
          "${{ github.repository }}" \
          "false"